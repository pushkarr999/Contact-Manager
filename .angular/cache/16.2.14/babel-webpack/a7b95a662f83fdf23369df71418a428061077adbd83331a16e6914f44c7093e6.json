{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class ApiService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = 'http://localhost:5000/api/'; // Replace with your API endpoint\n    this.accessToken = localStorage.getItem('token');\n  }\n  getData() {\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n      'Authorization': 'Bearer ' + this.accessToken // Replace with your token\n    });\n\n    return this.http.get(this.apiUrl + 'contacts', {\n      headers\n    });\n  }\n  createContact(data) {\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n      'Authorization': 'Bearer ' + this.accessToken // Replace with your token  // Replace with your token\n    });\n\n    return this.http.post(this.apiUrl + 'contacts', data, {\n      headers\n    });\n  }\n  deleteContact(id) {\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n      'Authorization': 'Bearer ' + this.accessToken // Replace with your token // Replace with your token\n    });\n\n    return this.http.delete(`${this.apiUrl + 'contacts'}/${id}`, {\n      headers\n    });\n  }\n  editContact(id, data) {\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n      'Authorization': 'Bearer ' + this.accessToken // Replace with your token\n    });\n\n    return this.http.put(`${this.apiUrl + 'contacts'}/${id}`, data, {\n      headers\n    });\n  }\n  login(data) {\n    return this.http.post(this.apiUrl + 'users/login', data);\n  }\n  register(data) {\n    return this.http.post(this.apiUrl + 'users/register', data);\n  }\n  static #_ = this.ɵfac = function ApiService_Factory(t) {\n    return new (t || ApiService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ApiService,\n    factory: ApiService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["HttpHeaders","ApiService","constructor","http","apiUrl","accessToken","localStorage","getItem","getData","headers","get","createContact","data","post","deleteContact","id","delete","editContact","put","login","register","_","i0","ɵɵinject","i1","HttpClient","_2","factory","ɵfac","providedIn"],"sources":["D:\\Projects\\Contact Manager\\frontend\\frontend\\src\\app\\backend.service.ts"],"sourcesContent":["// src/app/api.service.ts\r\nimport { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ApiService {\r\n\r\n  private apiUrl = 'http://localhost:5000/api/';  // Replace with your API endpoint\r\n  private accessToken = localStorage.getItem('token');\r\n\r\n  constructor(private http: HttpClient) { }\r\n\r\n  getData(): Observable<any> {\r\n    const headers = new HttpHeaders({\r\n      'Content-Type': 'application/json',\r\n      'Authorization': 'Bearer ' + this.accessToken  // Replace with your token\r\n    });\r\n\r\n    return this.http.get( this.apiUrl + 'contacts', { headers });\r\n  }\r\n\r\n  createContact(data: any): Observable<any> {\r\n    const headers = new HttpHeaders({\r\n      'Content-Type': 'application/json',\r\n        'Authorization': 'Bearer ' + this.accessToken  // Replace with your token  // Replace with your token\r\n    });\r\n\r\n    return this.http.post( this.apiUrl + 'contacts', data, { headers });\r\n  }\r\n\r\n  deleteContact(id: any): Observable<any> {\r\n    const headers = new HttpHeaders({\r\n      'Content-Type': 'application/json',\r\n      'Authorization': 'Bearer ' + this.accessToken  // Replace with your token // Replace with your token\r\n    });\r\n\r\n    return this.http.delete(`${this.apiUrl + 'contacts'}/${id}`, { headers });\r\n  }\r\n\r\n  editContact(id: any, data:any): Observable<any> {\r\n    const headers = new HttpHeaders({\r\n      'Content-Type': 'application/json',\r\n      'Authorization': 'Bearer ' + this.accessToken  // Replace with your token\r\n    });\r\n\r\n    return this.http.put(`${this.apiUrl + 'contacts'}/${id}`,data, { headers });\r\n  }\r\n\r\n  login(data: any): Observable<any> {\r\n\r\n    return this.http.post( this.apiUrl + 'users/login', data);\r\n  }\r\n\r\n  register(data: any): Observable<any> {\r\n\r\n    return this.http.post( this.apiUrl + 'users/register', data);\r\n  }\r\n}\r\n"],"mappings":"AAEA,SAAqBA,WAAW,QAAQ,sBAAsB;;;AAM9D,OAAM,MAAOC,UAAU;EAKrBC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAHhB,KAAAC,MAAM,GAAG,4BAA4B,CAAC,CAAE;IACxC,KAAAC,WAAW,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EAEX;EAExCC,OAAOA,CAAA;IACL,MAAMC,OAAO,GAAG,IAAIT,WAAW,CAAC;MAC9B,cAAc,EAAE,kBAAkB;MAClC,eAAe,EAAE,SAAS,GAAG,IAAI,CAACK,WAAW,CAAE;KAChD,CAAC;;IAEF,OAAO,IAAI,CAACF,IAAI,CAACO,GAAG,CAAE,IAAI,CAACN,MAAM,GAAG,UAAU,EAAE;MAAEK;IAAO,CAAE,CAAC;EAC9D;EAEAE,aAAaA,CAACC,IAAS;IACrB,MAAMH,OAAO,GAAG,IAAIT,WAAW,CAAC;MAC9B,cAAc,EAAE,kBAAkB;MAChC,eAAe,EAAE,SAAS,GAAG,IAAI,CAACK,WAAW,CAAE;KAClD,CAAC;;IAEF,OAAO,IAAI,CAACF,IAAI,CAACU,IAAI,CAAE,IAAI,CAACT,MAAM,GAAG,UAAU,EAAEQ,IAAI,EAAE;MAAEH;IAAO,CAAE,CAAC;EACrE;EAEAK,aAAaA,CAACC,EAAO;IACnB,MAAMN,OAAO,GAAG,IAAIT,WAAW,CAAC;MAC9B,cAAc,EAAE,kBAAkB;MAClC,eAAe,EAAE,SAAS,GAAG,IAAI,CAACK,WAAW,CAAE;KAChD,CAAC;;IAEF,OAAO,IAAI,CAACF,IAAI,CAACa,MAAM,CAAC,GAAG,IAAI,CAACZ,MAAM,GAAG,UAAU,IAAIW,EAAE,EAAE,EAAE;MAAEN;IAAO,CAAE,CAAC;EAC3E;EAEAQ,WAAWA,CAACF,EAAO,EAAEH,IAAQ;IAC3B,MAAMH,OAAO,GAAG,IAAIT,WAAW,CAAC;MAC9B,cAAc,EAAE,kBAAkB;MAClC,eAAe,EAAE,SAAS,GAAG,IAAI,CAACK,WAAW,CAAE;KAChD,CAAC;;IAEF,OAAO,IAAI,CAACF,IAAI,CAACe,GAAG,CAAC,GAAG,IAAI,CAACd,MAAM,GAAG,UAAU,IAAIW,EAAE,EAAE,EAACH,IAAI,EAAE;MAAEH;IAAO,CAAE,CAAC;EAC7E;EAEAU,KAAKA,CAACP,IAAS;IAEb,OAAO,IAAI,CAACT,IAAI,CAACU,IAAI,CAAE,IAAI,CAACT,MAAM,GAAG,aAAa,EAAEQ,IAAI,CAAC;EAC3D;EAEAQ,QAAQA,CAACR,IAAS;IAEhB,OAAO,IAAI,CAACT,IAAI,CAACU,IAAI,CAAE,IAAI,CAACT,MAAM,GAAG,gBAAgB,EAAEQ,IAAI,CAAC;EAC9D;EAAC,QAAAS,CAAA,G;qBAnDUpB,UAAU,EAAAqB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAVzB,UAAU;IAAA0B,OAAA,EAAV1B,UAAU,CAAA2B,IAAA;IAAAC,UAAA,EAFT;EAAM","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}